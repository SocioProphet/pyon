===========================================================
Ocean Observatories Initiative Cyberinfrastructure (OOI CI)
Integrated Observatory Network (ION)

pyon - Python COI Capability Container and Core Modules R2

(C) UC Regents, 2010-2011
===========================================================


INSTALL
=======

You need the following installed before you can use pyon:
  - python 2.7
    - Download and use installer on a Mac
    - If you need to build from source (like on some linux distributions), enable the following in the build:
      - SSL
      - sqlite
  - distutils 2.7.2
    - Download egg and execute with sh
  - pip
    - Use easy_install to install
  - homebrew (Mac, optional)
    - Install with: /usr/bin/ruby -e "$(curl -fsSL https://raw.github.com/gist/323731)"
  - virtualenv and virtualenvwrapper modules for your python 2.7 installation
    - Use easy_install to install (pip may not work)
    - May require XCode
  - libevent 2.0
    - This can easily be installed with Homebrew on a Mac or a package manager on linux.
  - libyaml 3.0
    - You need the -dev or -devel version on linux. If you don't have such a package, use extern/setup-libyaml.sh.
    - The Homebrew version on a mac is sufficient.
  - zeromq 2.1.x
    - The Homebrew version on a mac is sufficient.
  - couchdb 0.8
    - The Homebrew version on a mac is sufficient.

Short version to setup a Mac (assumes python 2.7 is already setup):
    brew install libevent libyaml zeromq couchdb

Now setup a virtualenv with a command like the following (substitute your own name for "ion27"):
    mkvirtualenv --no-site-packages --python=python2.7 ion27
    workon ion27


DEVELOPMENT TIME DEPENDENCIES
=============================

PACKAGES:

Install the python package dependencies with:
    python setup.py install
    Note: If the installation of numpy fails, use pip to install numpy and rerun


ION-DEFINITIONS SUBMODULE:

There is a git-submodule which tracks the current commit of ion-definitions that this pyon repository
depends on for object and service definitions. Run the following to pull and checkout that repository:
    git submodule update --init
    cd extern/ion-definitions
    git checkout master

On a regular `git-pull`, you should call `git submodule update` afterwards.

The obj/ subdir is a symlink to the checkout's extern/ion-definitions/objects.

See more about submodules:
- http://book.git-scm.com/5_submodules.html
- http://speirs.org/blog/2009/5/11/understanding-git-submodules.html
- http://blog.endpoint.com/2010/04/git-submodule-workflow.html

GENERATE SERVICE STUBS:

Generate service definition interfaces and abstract base classes files:
    python scripts/generate_interfaces.py
    Note: These will be placed in the interfaces/ subdirectory.


RUN-TIME DEPENDENCIES
=====================

Run couchdb in second terminal before starting the container or running tests:
    couchdb

Add the current directory to your PYTHONPATH for an easier time running scripts. Add the following
line to your ~/.profile (create it if it doesnt not exist, or use bash_profile if you already have that):
    export PYTHONPATH=.



TEST
====

Run the unittests:
    ./unittest

Run code coverage:
    nosetests -w pyon --with-coverage --cover-package=pyon


USE
===

Start the capability container in interactive mode:
    ./cc

List supported arguments:
    ./cc --help

Start the CC with a deploy file:
    ./cc --rel res/deploy/r2deploy.yml


EXAMPLES
========

Make sure to look in the examples directory for a README and examples.
