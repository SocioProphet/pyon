===========================================================
Ocean Observatories Initiative Cyberinfrastructure (OOI CI)
Integrated Observatory Network (ION)

pyon - Python COI Capability Container and Core Modules R2
https://confluence.oceanobservatories.org/x/ehdTAQ

(C) UC Regents, 2010-2011
===========================================================


INSTALL
=======

Install the following if not yet present:

* OS Packages and package management:
For Mac, use homebrew
    > /usr/bin/ruby -e "$(curl -fsSL https://raw.github.com/gist/323731)"
- python 2.7.2
    Download and use installer on a Mac.
    If you need to build from source (like on some linux distributions), enable the following in the build:
      - SSL
      - sqlite
- git 1.7.7: Use brew or download the Mac or Linux installer and run it
- couchdb 1.1.0 (optional if memory mockdb is used)
    You will need to upgrade couchdb to at least 1.1.0.
- rabbitmq 2.6.1 or later (recommended, but can use rabbitmq on amoeba)
    Use brew.
    Alternative: download generic Linux version and unpack into a suitable directory.
- Install libevent, libyaml, zeromq, couchdb, python, and rabbitmq with Homebrew
    > brew install libevent libyaml zeromq couchdb python rabbitmq
    You can even reinstall git using brew to clean up your /usr/local directory
    Linux: Note that many installs have much older versions installed by default.
      - libevent: Install with package manager
      - libyaml: You need the -dev or -devel version. If you don't have such a package, use extern/setup-libyaml.sh
      - couchdb: Make sure to have the appropriate version

* python packages and environment management:
- pip
    > easy_install pip
- virtualenv and virtualenvwrapper modules for your python 2.7 installation
    > easy_install --upgrade virtualenv
    > easy_install --upgrade virtualenvwrapper
    Note: This may require Mac's XCode (use XCode 3.3 free version)

* Setup a virtualenv to for Pyon (use any name you like):
    > mkvirtualenv --no-site-packages --python=python2.7 ion27
    > workon ion27



DEVELOPMENT TIME DEPENDENCIES
=============================

PACKAGES:

Use Buildout to install the python package dependencies with:
    > python bootstrap.py
    > bin/buildout


ION-DEFINITIONS SUBMODULE:

Link git submodule ion-definitions, containing object and service definitions and resource files:
    git submodule update --init

Note: This git-submodule always references a specific commit of ion-definitions used by pyon.

To update the code in pyon and the specific commit in the submodule:
    > git pull
    > git submodule update

Notes:
- The submodule update does NOT happen automatically
- The submodule update does NOT pull the branch head of the submodule.
- To change the submodule commit within pyon, cd into the submodule and do a `git pull`, then commit pyon.

The obj/ subdir is a symlink to the checkout's extern/ion-definitions/objects.
The res/ subdir is a symlink to the checkout's extern/ion-definitions/res.

See more about submodules:
- http://book.git-scm.com/5_submodules.html
- http://speirs.org/blog/2009/5/11/understanding-git-submodules.html
- http://blog.endpoint.com/2010/04/git-submodule-workflow.html


GENERATE SERVICE STUBS:

Generate service definition interfaces and abstract base classes files:
    > bin/generate_interfaces
    Note: These will be placed in the interfaces/ subdirectory (and not in GIT nor in the egg).


RUN-TIME DEPENDENCIES
=====================

COUCHDB (OBJECT DATA STORE):

Run couchdb in second terminal before starting the container or running tests:
    > couchdb


RABBITMQ (MESSAGE BROKER):
    > sudo sbin/rabbitmq-server


SOURCE PATH:

Add the current directory to your PYTHONPATH for an easier time running scripts. Add the following
line to your ~/.profile (create it if it doesnt not exist, or use bash_profile if you already have that):
    > export PYTHONPATH=.


TEST
====

Run the unittests:
    bin/unittest
    bin/nosetests -a UNIT

Run code coverage:
    bin/nosetests -w pyon --with-coverage --cover-package=pyon


USE
===

Provide local configuration overrides in:
    res/config/pyon.local.yml
    res/config/logging.local.yml

Start the capability container in interactive mode:
    > bin/pycc

List supported arguments:
    > bin/pycc --help

Start the CC with a deploy file:
    > bin/pycc --rel res/deploy/r2deploy.yml

Start the CC with a process to execute and then quit:
    > bin/pycc --proc examples.service.hello_service.HelloService

DEBUG
=====

Real-time debugging is possible with Pycharm. Start pycc from Pycharm. Use the -n option to
avoid the interactive ipython shell. It does not work property with the debugger.

You will need to make sure the Pycharm debug egg is available in your path, something like:
export PYTHONPATH=.:/Applications/PyCharm\ 1.5.2.app/pycharm-debug.egg

Remote debugging of services in a running container is possible too. Setup a remote debugging
configuration to use the localhost and port 8585. First start the remote debuging server, then start the
container from the command line below (the -n seems to be required)
    > bin/pyccd -n --rel res/deploy/r2services.yml


EXAMPLES
========

Make sure to look in the examples directory for a README and examples.


SEE ALSO
========

https://confluence.oceanobservatories.org/x/ehdTAQ
https://github.com/ooici/coi-services
