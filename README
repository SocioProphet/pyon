===========================================================
Ocean Observatories Initiative Cyberinfrastructure (OOI CI)
Integrated Observatory Network (ION)

pyon - Python COI Capability Container and Core Modules R2
https://confluence.oceanobservatories.org/x/ehdTAQ

(C) UC Regents, 2010-2011
===========================================================


INSTALL
=======

You need the following installed before you can use pyon:
  - python 2.7
    - Download and use installer on a Mac
    - If you need to build from source (like on some linux distributions), enable the following in the build:
      - SSL
      - sqlite
  - distutils 2.7.2
    - Download egg and execute with sh
  - pip
      > easy_install pip
  - homebrew (Mac, optional)
      > /usr/bin/ruby -e "$(curl -fsSL https://raw.github.com/gist/323731)"
  - virtualenv and virtualenvwrapper modules for your python 2.7 installation
      > easy_install --upgrade virtualenv
      > easy_install --upgrade virtualenvwrapper
      Note: This may require XCode (use XCode 3.3 free version)
  - libevent 2.0
      Mac: Use Homebrew install (see below)
      Linux: Install with package manager
  - libyaml 0.1.4 
      Mac: Use Homebrew install (see below)
      Linux: You need the -dev or -devel version. If you don't have such a package, use extern/setup-libyaml.sh.
  - zeromq 2.1.x
      Mac: Use Homebrew install (see below)
  - couchdb 0.8 (optional if memory mockdb is used)
      Mac: Use Homebrew install (see below)
  - rabbitmq 2.6.1 (optional if amoeba is used)
      Download generic Linux version and unpack
      Note: May need erl (Erlang) and some dependencies installed before

Short version to setup a Mac (assumes python 2.7 is already setup):
    brew install libevent libyaml zeromq couchdb

Now setup a virtualenv with a command like the following (substitute your own name for "ion27"):
    mkvirtualenv --no-site-packages --python=python2.7 ion27
    workon ion27


DEVELOPMENT TIME DEPENDENCIES
=============================

PACKAGES:

Use Buildout to install the python package dependencies with:
    > python bootstrap.py
    > bin/buildout

Alternative: Install the python package dependencies with:
    pip --upgrade numpy
    Note: easy_install / setup.py do not like numpy.
    python setup.py install


ION-DEFINITIONS SUBMODULE:

Link git submodule ion-definitions, containing object and service definitions and resource files:
    git submodule update --init
    cd extern/ion-definitions
    git checkout master

Note: This git-submodule always references a specific commit of ion-definitions used by pyon.

To update the code in pyon and the specific commit in the submodule:
    > git pull
    > git submodule update

Notes:
- The submodule update does NOT happen automatically
- The submodule update does NOT pull the branch head of the submodule.
- To change the submodule commit within pyon, cd into the submodule and do a `git pull`, then commit pyon.

The obj/ subdir is a symlink to the checkout's extern/ion-definitions/objects.
The res/ subdir is a symlink to the checkout's extern/ion-definitions/res.

See more about submodules:
- http://book.git-scm.com/5_submodules.html
- http://speirs.org/blog/2009/5/11/understanding-git-submodules.html
- http://blog.endpoint.com/2010/04/git-submodule-workflow.html


GENERATE SERVICE STUBS:

Generate service definition interfaces and abstract base classes files:
    > python scripts/generate_interfaces.py
    Note: These will be placed in the interfaces/ subdirectory (and not in GIT nor in the egg).


RUN-TIME DEPENDENCIES
=====================

COUCHDB (OBJECT DATA STORE):

Run couchdb in second terminal before starting the container or running tests:
    > couchdb


RABBITMQ (MESSAGE BROKER):
    > sudo sbin/rabbitmq-server


SOURCE PATH:

Add the current directory to your PYTHONPATH for an easier time running scripts. Add the following
line to your ~/.profile (create it if it doesnt not exist, or use bash_profile if you already have that):
    > export PYTHONPATH=.


TEST
====

Run the unittests:
    bin/unittest (if using buildout)
    ./unittest

Run code coverage:
    nosetests -w pyon --with-coverage --cover-package=pyon


USE
===

Provide local configuration overrides in:
    res/config/pyon.local.yml
    res/config/logging.local.yml

Start the capability container in interactive mode:
    bin/pycc (if using buildout)
    ./pycc

List supported arguments:
    bin/pycc --help

Start the CC with a deploy file:
    bin/pycc --rel res/deploy/r2deploy.yml


DEBUG
=====

Real-time debugging is possible with Pycharm. Start pycc from Pycharm.

Remote debugging of services in a running container is possible too. Setup a remote debugging configuration to use the localhost and port 8585.
First start the remote debuging server, then start the container from the command line below ( the -n seems to be required )

    ./pyccd -n --rel res/deploy/r2services.yml


EXAMPLES
========

Make sure to look in the examples directory for a README and examples.


SEE ALSO
========

https://confluence.oceanobservatories.org/x/ehdTAQ
