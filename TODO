Current pyon TODO list:
=======================

PACKAGING:

- Automate versioning and packaging of pyon egg

CODE:

- More __str__() output for classes
- Clear distinction between ION process and pyon process
- Move directory and datastore code to coi_services if possible
- Use log.info for relevant output, debug for debug level
- Rename EndpointFactory -> Endpoint and Endpoint -> Conversation
- Make module import (and static initialization) order more specific

STARTUP

- Enable to start more than one CC out of the same directory (logging, pid file)

OBJECTS:

- Second look at service YML files (look at WSDL). Methods -> operations, maybe no objects
- Before and after create: what's with ID and REV? Will it get updated?
- Service default arguments set to {} and [] in base class. Dangerous Python idiom. Solutions?

CONTAINER:

- Enhanced shell API
- Enhanced messaging bookkeeping: ms() more telling
- Exchange spaces introduced
- Add event framework
- Check service implementation against service definition (parameters, order)
- Error handling
- Standard entry point for

TESTING:

- ION framework for Mock tests
- PyonIntegrationTestCase
- Log and print in tests: visible on run

PROCESS/SERVICE:

- Clear confusion with service vs process
- Unique process ID
- Process as instance aggegating one state and multiple endpoints
- Process (greenlet) accepts messages from endpoints. One greenlet per process; one message at a time.
- Process attachment (direct or via container)
- More extensive Lifecycle
- IDE code completion for service clients and methods
- Be able to start non-service process in container
- Optional vs. mandatory service arguments
- Validate object content vs. service operations
- Make ion process use new lifecyclemixin - problem name conflict

MESSAGING:

- Use ACKs
- Messaging properties set:
- Non-AMQP (ZeroMQ)
- Local messaging with greenlet handover

OPEN QUESTIONS:
- How to declare mandatory (non null) service parameters?
- Should we support kwargs in service clients

BUGS (see also Jira project CISWCORE)

- Source path from not the current repo (e.g. pyon/examples not found)
- Find result does not pass validate interceptor
- Check IonObject validation vs. extends (does it work?)

